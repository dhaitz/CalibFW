#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""This is the main analysis program"""

import argparse
import glob
import imp
import json
import os
import shutil
import subprocess
import time


def artus():
    """artus modifies and runs the configs"""

    options = getoptions()
    if not options.nologo:
        print logo()

    # make json config
    if not options.isjson:
        custom = imp.load_source("config", options.cfg)
        conf = custom.get_template()
        conf["InputFiles"] = createFileList(conf["InputFiles"], options.fast)
        if conf["OutputPath"] == "out":
            conf["OutputPath"] = options.out
        if options.printconfig:
            print "json config:"
            print json.dumps(conf, sort_keys=True, indent=4)
        writeJson(conf, options.json)
        print len(conf["Pipelines"]),
        print "pipelines configured, written to", options.json

    # exit here if json config was the only aim
    if options.config:
        print "Config written to", options.json
        exit(0)

    # Now the config .json is ready and we can run Artus
    if options.batch:
        prepareWork(options.work, options.delete)
        writeDBS(conf, options.out, options.work + "/files.dbs")
        createRunfile(options.json, options.work + "/run-artus.sh")
        outpath = createGridControlConfig(conf, options.work + "/" + options.out + ".conf")
        outpath = options.work + "out/" + outpath

        try:
            subprocess.call(['go.py', options.work + "/" + options.out + ".conf"])
        except KeyboardInterrupt:
            exit(0)
        except:
            print "grid-control run failed"
            exit(1)

        if glob.glob(outpath):
            subprocess.call(['hadd', options.work + 'out.root'] + glob.glob(outpath))
        else:
            print "Batch job did not produce output %s. Exit." % outpath
            exit(1)
    else:  # local
        if not options.fast:
            print "Warning: The full run as a single job will take a while.",
            print "Are you sure? [Y/n]"
            try:
                if raw_input() == "n":
                    exit(0)
            except KeyboardInterrupt:
                exit(0)
        subprocess.call([options.base + "/artus", options.json])

    # show message and optionally open root file
    showMessage("Excalibur", "Artus run with config " + options.out + " done.")
    if options.root:
        print "\nOpen output file in TBrowser:"
        try:
            subprocess.call(["root", "-l",
                "%s/%s.root" % (options.base, options.out),
                "%s/scripts/tbrowser.cxx" % options.base])
        except:
            pass


def getoptions(configdir='cfg/artus/', name='artus'):
    """Set standard options and read command line arguments. """

    parser = argparse.ArgumentParser(
        description="%(prog)s is the main analysis program.",
        epilog="Have fun.")

    # config file
    parser.add_argument('cfg', metavar='cfg', type=str, nargs='?', default=None,
        help="config file (.py or .py.json)" +
             " - path: cfg/artus and .py can be omitted. No config implies mc -f")

    # options
    parser.add_argument('-b', '--batch', action='store_true',
        help="run with grid-control")
    parser.add_argument('-c', '--config', action='store_true',
        help="produce json config only")
    parser.add_argument('-d', '--delete', action='store_true',
        help="delete old outputs but one with the same name")
    parser.add_argument('-f', '--fast', type=int, nargs='*', default=None,
        help="limit number of input files. 3=files[-3:], 5 6=files[5:6].")
    parser.add_argument('-l', '--nologo', action='store_true',
        help="do not print the logo")
    parser.add_argument('-o', '--out', type=str, nargs=1, default=None,
        help="specify custom output name (default: config name)")
    parser.add_argument('-p', '--printconfig', action='store_true',
        help="print json config (long output)")
    parser.add_argument('-s', '--skip', type=int, nargs='+', default=None,
        help="skip events. 5=events[5,5+1], 5 3=events[5,5+3].")
    parser.add_argument('-v', '--verbose', action='store_true',
        help="verbosity")
    parser.add_argument('-w', '--work', type=str, nargs=1, default=None,
        help="specify custom work path (default from $EXCALIBUR_WORK variable")
    parser.add_argument('-r', '--root', action='store_true',
        help="open output file in ROOT TBrowser after completion")

    opt = parser.parse_args()

    # derive config file name
    if opt.cfg is None:
        opt.cfg = 'mc'
        if not opt.fast and not opt.batch and not opt.config:
            opt.fast = [3]
    if '/' not in opt.cfg:
        opt.cfg = configdir + opt.cfg
    if '.py' not in opt.cfg:
        opt.cfg += '.py'
    if not os.path.exists(opt.cfg):
        print "Config file", opt.cfg, "does not exist."
        exit(1)

    # derive json config file name
    opt.isjson = (opt.cfg[-8:] == '.py.json')
    opt.json = opt.cfg[:]
    if opt.isjson and opt.config:
        print "Json config alread created. Nothing to do."
        exit(1)
    if not opt.isjson:
        opt.json += ".json"

    # derive omitted values for fast and skip
    if opt.fast == []:
        opt.fast = [3]
    if opt.fast and len(opt.fast) == 1:
        opt.fast = [-opt.fast[0], None]
    if opt.skip and len(opt.skip) == 1:
        opt.skip = [opt.skip[0], opt.skip[0] + 1]
    elif opt.skip and len(opt.skip) == 2:
        opt.skip = [opt.skip[0], sum(opt.skip)]

    # set paths for libraries and outputs
    if not opt.out:
        opt.out = opt.cfg[opt.cfg.rfind('/') + 1:opt.cfg.rfind('.py')]
    opt.base = getPath()
    opt.boost = getPath('BOOSTPATH')
    if not opt.work:
        opt.work = getPath('EXCALIBUR_WORK', True) or getPath()
    opt.work += '/' + name + '/' + opt.out + '/'

    if opt.verbose:
        print opt
    return opt


def getPath(variable='EXCALIBUR_BASE', nofail=False):
    try:
        return os.environ[variable]
    except:
        print variable, "is not in shell variables:", os.environ.keys()
        print "Please source scripts/ini_excalibur and CMSSW!"
        if nofail:
            return None
        exit(1)


def writeJson(settings, filename):
    with open(filename, 'w') as f:
        json.dump(settings, f, sort_keys=True, indent=4)


def writeDBS(settings, nickname, filename):
    # ordering is important in the .dbs file format
    with open(filename, 'wb') as f:
        f.write("[" + nickname + "]\n")
        f.write("nickname = " + nickname + "\n")
        f.write("events = " + str(-len(settings['InputFiles'])) + "\n")
        f.write("prefix = " + os.path.split(settings['InputFiles'][0])[0] + "\n")
        for i in settings['InputFiles']:
            f.write(os.path.split(i)[1] + " = -1\n")


def copyFile(source, target, replace={}):
    with open(source) as f:
        text = f.read()
    for a, b in replace.items():
        text = text.replace(a, b)
    with open(target, 'wb') as f:
        f.write(text)
    return text


def createGridControlConfig(settings, filename, original=None):
    if original is None:
        original = getPath() + '/cfg/artus/base/gc.conf'
    jobs = {
            'mc': 80,
            'data': 120,
    }
    fpj = len(settings['InputType']) / float(jobs.get(settings['InputType'], 70))
    fpj = int(max(1, fpj))
    d = {
        'files per job = 100': 'files per job = ' + str(fpj),
        '@NICK@': settings["OutputPath"],
        '$EXCALIBUR_BASE': getPath(),
        '$EXCALIBUR_WORK': getPath('EXCALIBUR_WORK'),
        '$BOOSTPATH': getPath('BOOSTPATH'),
    }
    text = copyFile(original, filename, d)
    # return the name of output files
    text = text[text.find("se output pattern =") + 19:]
    text = text[:text.find("\n")]
    text = text.replace("@MY_JOBID@", "*")
    return text.strip()


def createRunfile(configjson, filename='test.sh', original=None):
    if original is None:
        original = getPath() + '/cfg/artus/base/run-artus.sh'
    with open(original) as f:
        text = f.read()
    text = text.replace('cfg/artus/config.py.json', configjson)
    text = text.replace('$EXCALIBUR_BASE', getPath())
    text = text.replace('$CMSSW_BASE', getPath('CMSSW_BASE'))
    with open(filename, 'wb') as f:
        f.write(text)


def showMessage(title, message):
    userpc = "%s@%s" % (getPath('USER'), getPath('USERPC'))
    iconpath = '/usr/users/dhaitz/excalibur/excal_small.jpg'
    try:
        subprocess.call(['ssh', userpc,
            'DISPLAY=:0 notify-send "%s" "%s" -i %s' % (title, message, iconpath)])
    except:
        pass
    print message


def createFileList(files, fast=False):
        if type(files) == str:
            if "*" in files:
                print "Creating file list from", files
                files = glob.glob(files)
            else:
                files = [files]
        if not files:
            print "No input files found."
            exit(1)
        if fast:
            files = files[fast[0]:fast[1]]
        return files


def prepareWork(work, delete=False):
    """ensure that the output path exists and delete old outputs optionally)

    to save your outputs simply rename them without timestamp
"""
    if work[-1] == '/':
        work = work[:-1]
    paths = glob.glob(work + "_20*")
    if delete:
        for p in paths:
            if os.path.exists(work):
                print "removing", p
                shutil.rmtree(p)
    elif len(paths) > 1:
        print len(paths), "old output directories for this config. Clean-up recommended."
    if os.path.exists(work):
        shutil.move(work, work + time.strftime("_%Y-%m-%d_%H-%M"))
    os.mkdir(work)


def logo():
    return """\
  _______ ___   ___  ______      ___       __       __   ______    __    __   ______
 |   ____|\  \ /  / /      |    /   \     |  |     |  | |   _  \  |  |  |  | |   _  \ 
 |  |__    \  V  / |  ,----'   /  ^  \    |  |     |  | |  |_)  | |  |  |  | |  |_)  |
 |   __|    >   <  |  |       /  /_\  \   |  |     |  | |   _  <  |  |  |  | |      /
 |  |____  /  .  \ |  `----. /  _____  \  |  `----.|  | |  |_)  | |  `--'  | |  |\  \ 
 |_______|/__/ \__\ \______|/__/     \__\ |_______||__| |______/   \______/  | _| \__|
                                                                  (previously CalibFW)
                   (O)
                   <M       The mighty broadsword of cut-based jet studies
        o          <M
       /| ......  /:M\------------------------------------------------,,,,,,
     (O)[]XXXXXX[]I:K+}=====<{H}>================================------------>
       \| ^^^^^^  \:W/------------------------------------------------''''''
        o          <W
                   <W
                   (O)                 Calibrate like a king!
"""

if __name__ == "__main__":
    artus()
